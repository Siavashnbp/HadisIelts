@page "/services/writingCorrection/prices"
@using HadisIelts.Client.Features.Teacher.Models;
@using HadisIelts.Client.Features.Teacher.WritingCorrectionPricesComponents
@using HadisIelts.Shared.Requests.Correction;
@using HadisIelts.Shared.Requests.Teacher;
@inject IMediator Mediator
<div class="container">
    <div class="row">
        <div class="col">
        </div>
    </div>
    <div class="row">
        <div class="col">
            <WritingCorrectionPriceTable WritingCorrectionPrices="_writingCorrectionPrices" WritingTypes="_writingTypes" />
        </div>
    </div>
    <AuthorizeView Roles="Teacher,Administrator" Context="Auth">
        <Authorized>
            <EditForm Model="_writingPriceModel" OnValidSubmit="AddWritingCorrectionPrice">
                <FluentValidationValidator />
                <div class="container text-center list-group-item-light main-form" style="text-align:center;border:dashed;padding:5px;">
                    <div class="row justify-content-center">
                        <div class="col">
                            <h5 style="margin-top:10px;">Add Price</h5>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-floating">
                                <InputText class="form-control" @bind-Value="_writingPriceModel.Name" style="text-align:center;"
                                           id="floatingNameInput" placeholder="Name" />
                                <label for="floatingNameInput">Name</label>
                            </div>
                            <ValidationMessage For="(()=>_writingPriceModel.Name)" />
                        </div>
                        <div class="col form-floating">
                            <InputSelect class="form-select form-control" @bind-Value="_writingPriceModel.WritingType.Id"
                                         style="text-align:center; min-width:max-content;" id="floatingWritingTypeSelect">
                                <option selected value="0">Not Selected</option>
                                @if (_writingTypes is not null)
                                {
                                    @foreach (var item in _writingTypes)
                                    {
                                        <option value="@(item.Id)">@(item.Name)</option>
                                    }
                                }
                            </InputSelect>
                            <label for="floatingWritingTypeSelect" style="margin-left:10px;">Writing Type</label>
                            <ValidationMessage For="(()=>_writingPriceModel.WritingType)" />
                            <ValidationMessage For="(()=>_writingPriceModel.WritingType.Id)" />
                        </div>
                        <div class="col text-center">
                            <div class="row justify-content-center">
                                <div class="col-lg-10 form-floating">
                                    <InputNumber class="form-control" TValue="int?" @bind-Value="_writingPriceModel.WordCount"
                                                 id="floatingWordCount" placeholder="Word Count" EnableMinMax="true" Min="0"
                                                 style="text-align:center;" />
                                    <label for="floatingWordCountInput" style="margin-left:10px;">Word Count</label>
                                </div>
                                <ValidationMessage For="(()=>_writingPriceModel.WordCount)" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="row justify-content-center">
                                <div class="col-lg-10 form-floating">
                                    <InputNumber class="form-control" TValue="int?" @bind-Value="_writingPriceModel.Price"
                                                 style="text-align:center;" id="floatingPriceInput" placeholder="Price"
                                                 EnableMinMax="true" Min="0" />
                                    <label for="floatingPriceInput" style="margin-left:10px;">Price</label>
                                </div>
                            </div>
                            <ValidationMessage For="(()=>_writingPriceModel.Price)" />
                        </div>
                    </div>
                    <div class="row justify-content-center" style="margin-top:10px;">
                        <div class="col-4">
                            <button type="submit" class="btn btn-secondary">
                                Add
                            </button>
                        </div>
                    </div>
                    @if (_errorMessage != string.Empty)
                    {
                        <div class="row justify-content-center" style="margin-top:15px;">
                            <div class="col-lg-8">
                                <div class="alert alert-danger" role="alert">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                                    </svg>
                                    @_errorMessage
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </EditForm>
            <div class="container secondary-form col-lg-4">
                <div class="row">
                    <h5>Add Writing Type</h5>
                </div>
                <div class="row justify-content-center">
                    <div class="col">
                        <InputText class="form-control" @bind-Value="_addWritingTypeName" />
                        <button class="btn btn-warning" @onclick="(()=>AddWritingTypeAsync(_addWritingTypeName!))">Add</button>
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>
@code {
    #region Parameters
    private List<WritingPriceModel> _writingCorrectionPrices = new List<WritingPriceModel>();
    private List<WritingTypeSharedModel>? _writingTypes;
    private WritingPriceModel _writingPriceModel = new WritingPriceModel();
    private string? _addWritingTypeName;
    private string _errorMessage = string.Empty;
    #endregion

    #region Initializers
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetWritingTypes();
            await GetWritingCorrectionPrices();
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion

    #region Methods
    private async Task AddWritingCorrectionPrice()
    {
        try
        {
            var request = new AddWritingCorrectionPriceRequest(new WritingCorrectionServicePriceSharedModel
                {
                    Name = _writingPriceModel.Name,
                    Price = (uint)_writingPriceModel.Price!,
                    WordCount = (int)_writingPriceModel.WordCount!,
                    WritingTypeId = _writingPriceModel.WritingType.Id
                });
            var result = await Mediator.Send(request);
            if (result is not null)
            {
                if (result.AddedWritingCorrectionServicePrice.Id != -409)
                {
                    var writingType = _writingTypes!.FirstOrDefault
                    (x => x.Id == result.AddedWritingCorrectionServicePrice.WritingTypeId);
                    if (writingType is not null)
                    {
                        _writingCorrectionPrices.Add(new WritingPriceModel
                            {
                                Id = result.AddedWritingCorrectionServicePrice.Id,
                                Name = result.AddedWritingCorrectionServicePrice.Name,
                                Price = (int)result.AddedWritingCorrectionServicePrice.Price,
                                WordCount = result.AddedWritingCorrectionServicePrice.WordCount,
                                WritingType = writingType
                            });
                        _writingPriceModel = new WritingPriceModel();
                        _errorMessage = string.Empty;
                    }
                    StateHasChanged();
                }
                else
                {
                    _errorMessage = "Writing type could not be found";
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task GetWritingCorrectionPrices()
    {
        if (_writingTypes is not null)
        {
            var result = await Mediator.Send(new GetWritingCorrectionPricesRequest());
            if (result is not null)
            {
                foreach (var item in result.WritingCorrectionPrices)
                {
                    var writingType = _writingTypes.FirstOrDefault(x => x.Id == item.WritingTypeId);
                    _writingCorrectionPrices.Add(new WritingPriceModel
                        {
                            Id = item.Id,
                            Name = item.Name,
                            Price = (int)item.Price,
                            WordCount = item.WordCount,
                            WritingType = writingType!
                        });
                }
                StateHasChanged();
            }
        }
    }
    private async Task GetWritingTypes()
    {
        var request = new GetWritingTypesRequest();
        var response = await Mediator.Send(request);
        if (response?.WritingTypes is not null && response.WritingTypes.Count > 0)
        {
            _writingTypes = new List<WritingTypeSharedModel>();
            foreach (var item in response.WritingTypes)
            {
                _writingTypes.Add(new WritingTypeSharedModel
                    {
                        Id = item.Id,
                        Name = item.Name
                    });
            }
            StateHasChanged();
        }
    }
    private async Task AddWritingTypeAsync(string name)
    {
        if (name != string.Empty)
        {
            var request = new AddWritingTypeRequest(name);
            var response = await Mediator.Send(request);
            if (response?.WritingType is not null)
            {
                _writingTypes!.Add(new WritingTypeSharedModel
                    {
                        Id = response.WritingType.Id,
                        Name = response.WritingType.Name
                    });
                StateHasChanged();
            }
        }
    }
    #endregion

    #region Page Details and Information
    public const string PageUrl = "/services/writingCorrection/prices";
    #endregion
}
