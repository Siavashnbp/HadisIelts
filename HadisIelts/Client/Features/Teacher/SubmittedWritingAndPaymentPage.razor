@page "/teacher/services/writingCorrection/submittedFiles/{PaymentID}"
@using HadisIelts.Client.Features.Correction.WritingCorrectionComponents
@using HadisIelts.Client.Features.Payment.WritingCorrectionPaymentPageComponents
@using HadisIelts.Client.Features.Teacher.SubmittedWritingAndPaymentComponents
@using HadisIelts.Client.Services.File;
@using HadisIelts.Client.Services.Writing;
@using HadisIelts.Shared.Requests.Payment;
@using System.Net;
@using HadisIelts.Shared.Requests.Teacher;
@inject IClientWritingServices ClientWritingSevices;
@inject IMediator Mediator;
@inject IFileServices FileServices;
<AuthorizeView Roles="Administrator,Teacher">
    <Authorized>
        <div class="container" style="margin-top:10px;">
            @if (_paymentGroup is not null && _paymentGroup.Service is not null)
            {
                <div class="row">
                    <div class="col">
                        <SubmittedWritingFilesTable ProcessedFiles="_paymentGroup.Service.ProcessedWritingFiles" />
                    </div>

                </div>
                <div class="row justify-content-center text-center">
                    <div class="col">
                        <h5 class="text-success">Total Price : @($"{_paymentGroup.Service.TotalPrice:n0}") Rials</h5>
                    </div>
                </div>
            }
            <div class="row text-center">
                <h5 class="text-info">@_paymentGroup!.Message</h5>
            </div>
            <div class="row justify-content-center">

                <div class="btn-group col-lg-3">
                    @if (_paymentGroup!.IsPaymentCheckPending)
                    {
                        <button class="btn btn-success" style="margin:5px;" @onclick="(()=>SubmitPaymentGroupApprovement(true))"
                                disabled="@(_paymentFiles.Any(x=>!x.IsVerified))">
                            Approve
                        </button>
                        <button class="btn btn-danger" style="margin:5px;" @onclick="(()=>SubmitPaymentGroupApprovement(false))">Reject</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" @onclick="ChangePaymentGroupApprovement" style="margin:5px;">Edit payment verifications</button>
                    }
                </div>
            </div>
            <div class="row">
                @if (_paymentFiles is not null && _paymentFiles.Count > 0)
                {
                    <div class="accordion" id="accordionSubmittedPayments">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="submittedPaymentHeader">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#submittedPaymentCollapse" aria-expanded="false"
                                        aria-controls="submittedPaymentCollapse">
                                    Submitted Payments
                                </button>
                            </h2>
                            <div id="submittedPaymentCollapse" class="accordion-collapse collapse show" aria-labelledby="submittedPaymentHeader"
                                 data-bs-parent="#accordionSubmittedPayment">
                                <div class="accordion-body">
                                    <div class="row">

                                        @foreach (var item in _paymentFiles)
                                        {
                                            <div class="col-lg-4">
                                                <PaymentVerificationImageCard PaymentFile="item" OnThumbnailIsClicked="HandleOnThumbnailIsClicked"
                                                                      OnVerificationButtonIsClicked="HandleOnVerificationButtonIsClicked" OnEditButtonIsClicked="HandeOnEditButtonIsClicked"
                                                                      IsEditEnabled="_paymentGroup.IsPaymentCheckPending" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (_showModal)
        {
            <ViewImageModal ImageData="@(FileServices.ViewImageData(_modalImageData!))" OnCloseButtonIsClicked="CloseModal" />
        }
    </Authorized>
</AuthorizeView>
@code {
    [Parameter]
    public string? PaymentID { get; set; }
    private PaymentGroupSharedModel<WritingCorrectionPackageSharedModel> _paymentGroup = new PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>();
    private List<PaymentPictureSharedModel> _paymentFiles = new List<PaymentPictureSharedModel>();
    private string? _modalImageData;
    private bool _showModal = false;
    private CorrectedWritingSharedModel _correctedWriting = new CorrectedWritingSharedModel();
    protected override async Task OnInitializedAsync()
    {
        await GetWritingCorrectionPaymentPackage();
        if (_paymentGroup is not null)
        {
            _paymentGroup.Service = new WritingCorrectionPackageSharedModel();
            var result = await ClientWritingSevices.GetSubmittedWritingCorrectionFiles(_paymentGroup.SubmittedServiceID);
            _paymentGroup.Service.TotalPrice = result.WritingCorrectionPackage.TotalPrice;
            _paymentGroup.Service.ProcessedWritingFiles = new List<ProcessedWritingFileSharedModel>();
            _paymentGroup.Service.ProcessedWritingFiles = result.WritingCorrectionPackage.ProcessedWritingFiles;
        }
    }
    private async Task GetWritingCorrectionPaymentPackage()
    {
        if (PaymentID is not null)
        {
            _paymentGroup = new PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>();
            var request = new GetPaymentGroupRequest(PaymentID);
            var result = await Mediator.Send(request);
            _paymentGroup = result.PaymentGroup;
            _paymentFiles = _paymentGroup.PaymentPictures;
        }
    }
    private async Task SubmitPaymentGroupApprovement(bool isApproved)
    {
        try
        {
            if (_paymentGroup.IsPaymentCheckPending)
            {
                var request = new SubmitPaymentGroupApprovementRequest(PaymentID!, isApproved);
                var response = await Mediator.Send(request);
                if (response.WasSuccessful)
                {
                    _paymentGroup.IsPaymentApproved = isApproved;
                    _paymentGroup.IsPaymentCheckPending = false;
                    _paymentGroup.Message = response.Message;
                    _paymentFiles.Select(x =>
                    {
                        x.IsVerificationPending = false;
                        x.IsVerified = isApproved;
                        x.Message = isApproved ? "Verified" : "Rejected";
                        return x;
                    });
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task ChangePaymentGroupApprovement()
    {
        var request = new EditPaymentGroupApprovementRequest(PaymentID!);
        var response = await Mediator.Send(request);
        if (response.WasSauccessful)
        {
            _paymentGroup.IsPaymentCheckPending = true;
            _paymentGroup.Message = "Verification pending";
            StateHasChanged();
        }
    }
    private async Task UploadCorrectedFile(int writingFileID)
    {
        var request = new UploadCorrectedWritingRequest(WritingFileID: writingFileID,
            Name: _correctedWriting.Name, Data: _correctedWriting.Data);
        var response = await Mediator.Send(request);
        if (response.CorrectedFile is not null)
        {
            var processedWritingFile = _paymentGroup.Service.ProcessedWritingFiles.FirstOrDefault(x => x.WritingFile.ID == writingFileID);
            processedWritingFile!.CorrectedWriting= response.CorrectedFile;
            StateHasChanged();
        }
    }

    //Handlers
    private void HandleOnThumbnailIsClicked(string data)
    {
        _modalImageData = data;
        _showModal = true;
    }
    private async Task HandleOnVerificationButtonIsClicked((int pictureID, bool isVerified) paymentVerification)
    {
        try
        {
            var request = new SubmitPaymentVerificationRequest
            (PictureID: paymentVerification.pictureID, IsVerfifed: paymentVerification.isVerified);
            var response = await Mediator.Send(request);
            if (response.VerifiedPayment is not null)
            {
                var paymentIndex = _paymentFiles.FindIndex(payment => payment.ID == paymentVerification.pictureID);
                if (paymentIndex != -1)
                {
                    _paymentFiles[paymentIndex] = response.VerifiedPayment;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task HandeOnEditButtonIsClicked(int paymentID)
    {
        var request = new EditPaymentPictureVerificationRequest(paymentID);
        var response = await Mediator.Send(request);
        if (response.WasSuccessful)
        {
            var updatePayment = _paymentFiles.Find(x => x.ID == paymentID);
            updatePayment!.IsVerificationPending = true;
            updatePayment!.Message = "Verification pending";
        }
    }
    private void CloseModal()
    {
        _modalImageData = string.Empty;
        _showModal = false;
    }

}
