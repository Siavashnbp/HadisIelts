@page "/services/writingCorrection/teacher/submittedFiles/{PaymentId}"
@using HadisIelts.Client.Features.Correction.Models;
@using HadisIelts.Client.Features.Correction.WritingCorrectionComponents
@using HadisIelts.Client.Features.Payment.WritingCorrectionPaymentPageComponents
@using HadisIelts.Client.Features.Teacher.SubmittedWritingAndPaymentComponents
@using HadisIelts.Client.Services.File;
@using HadisIelts.Client.Services.Writing;
@using HadisIelts.Shared.Requests.Correction;
@using HadisIelts.Shared.Requests.Payment;
@using System.Net;
@using HadisIelts.Shared.Requests.Teacher;
@inject IClientWritingServices ClientWritingSevices;
@inject IMediator Mediator;
@inject IFileServices FileServices;
@inject NavigationManager NavMan;
<AuthorizeView Roles="Administrator,Teacher">
    <Authorized>
        <div class="container main-container" style="margin-top:10px;">
            @if (_paymentGroup is not null && _paymentGroup.Service is not null)
            {
                <div class="row">
                    <div class="col">
                        <SubmittedWritingFilesTable ProcessedFiles="_paymentGroup.Service.ProcessedWritingFiles" OnCorrectedWritingUpload="HandleOnCorrectedWritingUpload"
                                                OnDeleteButtonClick="HandleOnDeleteButtonClick" />
                    </div>

                </div>
                <div class="row justify-content-center text-center">
                    <div class="col">
                        <h5 class="text-success">Total Price : @($"{_paymentGroup.Service.TotalPrice:n0}") Rials</h5>
                    </div>
                </div>
            }
            <div class="row text-center">
                <h5 class="text-info">@_paymentGroup!.Message</h5>
            </div>
            <div class="row justify-content-center">

                <div class="btn-group col-lg-3">
                    @if (_paymentGroup!.IsPaymentCheckPending)
                    {
                        <button class="btn btn-success" style="margin:5px;" @onclick="(()=>SubmitPaymentGroupApprovement(true))"
                                disabled="@(_paymentFiles?.Any(x=>!x.IsVerified))">
                            Approve
                        </button>
                        <button class="btn btn-danger" style="margin:5px;" @onclick="(()=>SubmitPaymentGroupApprovement(false))">Reject</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" @onclick="ChangePaymentGroupApprovement" style="margin:5px;">Edit payment verifications</button>
                    }
                </div>
            </div>
            <div class="row">
                @if (_paymentFiles is not null && _paymentFiles.Count > 0)
                {
                    <div class="accordion" id="accordionSubmittedPayments">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="submittedPaymentHeader">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#submittedPaymentCollapse" aria-expanded="false"
                                        aria-controls="submittedPaymentCollapse">
                                    Submitted Payments
                                </button>
                            </h2>
                            <div id="submittedPaymentCollapse" class="accordion-collapse collapse show" aria-labelledby="submittedPaymentHeader"
                                 data-bs-parent="#accordionSubmittedPayment">
                                <div class="accordion-body">
                                    <div class="row">

                                        @foreach (var item in _paymentFiles)
                                        {
                                            <div class="col-lg-4">
                                                <PaymentVerificationImageCard PaymentFile="item" OnThumbnailIsClicked="HandleOnThumbnailIsClicked"
                                                                      OnVerificationButtonIsClicked="HandleOnVerificationButtonIsClicked" OnEditButtonIsClicked="HandeOnEditButtonIsClicked"
                                                                      IsEditEnabled="_paymentGroup.IsPaymentCheckPending" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (_showModal)
        {
            <ViewImageModal ImageData="@(FileServices.ViewImageData(_modalImageData!))" OnCloseButtonIsClicked="CloseModal" />
        }
    </Authorized>
</AuthorizeView>
@code {
    #region Parameters
    [Parameter]
    public string? PaymentId { get; set; }
    private PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>? _paymentGroup;
    private List<PaymentPictureSharedModel>? _paymentFiles;
    private string? _modalImageData;
    private bool _showModal = false;
    private CorrectedWritingSharedModel? _correctedWriting;
    #endregion

    #region Initializers
    protected override async Task OnInitializedAsync()
    {
        await GetWritingCorrectionPaymentPackage();
        if (_paymentGroup is not null)
        {
            await GetSubmittedWritings();
        }
    }
    #endregion

    #region Methods
    private async Task GetWritingCorrectionPaymentPackage()
    {
        if (PaymentId is not null)
        {
            _paymentGroup = new PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>();
            var request = new GetPaymentGroupRequest(PaymentId);
            var result = await Mediator.Send(request);
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _paymentGroup = result.PaymentGroup;
                _paymentFiles = _paymentGroup.PaymentPictures;
            }
        }
    }
    private async Task SubmitPaymentGroupApprovement(bool isApproved)
    {
        try
        {
            if (_paymentGroup!.IsPaymentCheckPending)
            {
                var request = new SubmitPaymentGroupApprovementRequest(PaymentId!, isApproved);
                var response = await Mediator.Send(request);
                if (response is not null)
                {
                    if (response.WasSuccessful)
                    {
                        _paymentGroup.IsPaymentApproved = isApproved;
                        _paymentGroup.IsPaymentCheckPending = false;
                        _paymentGroup.Message = response.Message;
                        _paymentFiles?.Select(x =>
                        {
                            if (x.IsVerificationPending)
                            {
                                x.IsVerificationPending = false;
                                x.IsVerified = isApproved;
                                x.Message = isApproved ? "Verified" : "Rejected";
                            }
                            return x;
                        });
                    }
                    else
                    {
                        _paymentGroup.Message = response.Message;
                    }
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task ChangePaymentGroupApprovement()
    {
        try
        {
            var request = new EditPaymentGroupApprovementRequest(PaymentId!);
            var response = await Mediator.Send(request);
            if (response is not null)
            {

                if (response.WasSauccessful)
                {
                    _paymentGroup!.IsPaymentCheckPending = true;
                    _paymentGroup.Message = "Verification pending";
                }
                else
                {
                    _paymentGroup!.IsPaymentCheckPending = false;
                    _paymentGroup.Message = _paymentGroup.IsPaymentApproved ? "Payment group is verified" : "Payment group is rejected";
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task UploadCorrectedFile(int writingFileId)
    {
        try
        {
            if (_correctedWriting is not null)
            {
                var request = new UploadCorrectedWritingRequest(WritingFileId: writingFileId,
                    Name: _correctedWriting.Name, Data: _correctedWriting.Data);
                var response = await Mediator.Send(request);
                if (response?.CorrectedFile is not null)
                {
                    var processedWritingFile = _paymentGroup!.Service.ProcessedWritingFiles.FirstOrDefault(x => x.WritingFile.Id == writingFileId);
                    processedWritingFile!.CorrectedWriting = response.CorrectedFile;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private async Task GetSubmittedWritings()
    {
        var request = new GetSubmittedWritingCorrectionFilesRequest(SubmissionId: _paymentGroup!.SubmittedServiceId);
        var response = await Mediator.Send(request);
        if (response is not null)
        {
            if (response.StatusCode == HttpStatusCode.OK)
            {
                _paymentGroup.Service = response.WritingCorrectionPackage;
            }
            else if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                NavMan.NavigateTo(NotAuthorizedComponent.PageUrl);
            }
            //TODO - proper massage for other responses
        }
    }
    private async void ChangeWritingGroupCorrectionStatus(string Id)
    {
        try
        {
            var response = await Mediator.Send(new ChangeWritingGroupCorrectionStatusRequest(_paymentGroup!.SubmittedServiceId));
            if (response is not null)
            {
                _paymentGroup.Service.IsCorrected = response.CorrectionStatus;
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    #endregion

    #region EventHandlers
    private async Task HandleOnCorrectedWritingUpload(WritingFileModel correctedFile)
    {
        try
        {
            var request = new UploadCorrectedWritingRequest(WritingFileId: correctedFile.Id,
                Name: correctedFile.Name, Data: correctedFile.FileData);
            var response = await Mediator.Send(request);
            if (response?.CorrectedFile is not null)
            {
                var writingIndex = _paymentGroup!.Service.ProcessedWritingFiles.FindIndex(x => x.WritingFile.Id == request.WritingFileId);
                _paymentGroup.Service.ProcessedWritingFiles[writingIndex].CorrectedWriting = response.CorrectedFile;
                if (!_paymentGroup.Service.ProcessedWritingFiles.Any(x => x.CorrectedWriting == null))
                {
                    ChangeWritingGroupCorrectionStatus(_paymentGroup.Id);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private async void HandleOnDeleteButtonClick(int Id)
    {
        try
        {
            var response = await Mediator.Send(new DeleteCorrectedWritingRequest(Id));
            if (response is not null)
            {
                if (response.WasSuccessful)
                {
                    var index = _paymentGroup!.Service.ProcessedWritingFiles.FindIndex(x => x.CorrectedWriting!.Id == Id);
                    _paymentGroup.Service.ProcessedWritingFiles[index].CorrectedWriting = null;
                    if (_paymentGroup.Service.IsCorrected)
                    {
                        ChangeWritingGroupCorrectionStatus(_paymentGroup.Id);
                    }
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private void HandleOnThumbnailIsClicked(string data)
    {
        _modalImageData = data;
        _showModal = true;
    }
    private async Task HandleOnVerificationButtonIsClicked((int pictureId, bool isVerified) paymentVerification)
    {
        try
        {
            var request = new SubmitPaymentVerificationRequest
            (PictureId: paymentVerification.pictureId, IsVerfifed: paymentVerification.isVerified);
            var response = await Mediator.Send(request);
            if (response?.VerifiedPayment is not null)
            {
                var paymentIndex = _paymentFiles!.FindIndex(payment => payment.Id == paymentVerification.pictureId);
                if (paymentIndex != -1)
                {
                    _paymentFiles[paymentIndex] = response.VerifiedPayment;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private async Task HandeOnEditButtonIsClicked(int paymentId)
    {
        var request = new EditPaymentPictureVerificationRequest(paymentId);
        var response = await Mediator.Send(request);
        if (response is not null && response.WasSuccessful)
        {
            var updatePayment = _paymentFiles!.Find(x => x.Id == paymentId);
            if (updatePayment is not null)
            {
                updatePayment.IsVerificationPending = true;
                updatePayment.Message = "Verification pending";
            }
        }
    }
    #endregion

    #region Events
    private void CloseModal()
    {
        _modalImageData = string.Empty;
        _showModal = false;
    }
    #endregion

    #region Page Details and Information
    public static string PageUrl(string id) => $"/services/writingCorrection/teacher/submittedFiles/{id}";
    #endregion

}
