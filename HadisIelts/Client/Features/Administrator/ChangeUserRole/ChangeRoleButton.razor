@using HadisIelts.Shared.Requests.Admin;
@using HadisIelts.Shared.Requests.Administrator;
@using static HadisIelts.Shared.Enums.UserRelatedEnums;
@inject IMediator Mediator;
<button class="btn @(_userRole.Value?"btn-success":"btn-danger")" onclick="@(async ()=>await UpdateUserRole())">
    @if (_userRole.Value)
    {
        <h6>Yes</h6>
    }
    else
    {
        <h6>No</h6>
    }
</button>
@code {
    #region Parameters
    [Parameter, EditorRequired]
    public Tuple<ApplicationRoles, bool> Role { get; set; }
    [Parameter, EditorRequired]
    public string Email { get; set; }
    private (ApplicationRoles Role, bool Value) _userRole;
    #endregion

    #region Initializers
    protected override void OnInitialized()
    {
        _userRole = (Role.Item1, Role.Item2);
    }
    #endregion

    #region Methods
    private async Task UpdateUserRole()
    {
        try
        {
            var request = new UpdateUserRoleRequest(
                    Email: Email,
                    Role: _userRole.Role,
                    Value: !_userRole.Value);
            var response = await Mediator.Send(request);
            if (response is not null)
            {
                var updatedRole = response.UserRoles.Roles?.FirstOrDefault(x => x.Item1 == _userRole.Role);
                if (updatedRole is not null)
                {
                    _userRole = (updatedRole.Item1, updatedRole.Item2);
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion
}
