@using HadisIelts.Client.Features.Administrator;
@using HadisIelts.Shared.Requests.Admin;
@using HadisIelts.Shared.Requests.Administrator;
@using static HadisIelts.Shared.Enums.UserRelatedEnums;
@inject IMediator Mediator;
<button class="btn @(Role.Value?"btn-success":"btn-danger")" onclick="@(async ()=>await UpdateUserRole())">
    @if (Role.Value)
    {
        <h6>Yes</h6>
    }
    else
    {
        <h6>No</h6>
    }
</button>
@code {
    #region Parameters
    [Parameter, EditorRequired]
    public UserRoleModel Role { get; set; } = new();
    [Parameter, EditorRequired]
    public string Email { get; set; }
    #endregion

    #region Initializers
    
    #endregion

    #region Methods
    private async Task UpdateUserRole()
    {
        try
        {
            var request = new UpdateUserRoleRequest(
                    Email: Email,
                    Role: Role.Role,
                    Value: !Role.Value);
            var response = await Mediator.Send(request);
            if (response is not null)
            {
                var updatedRole = response.UserRoles.Roles?.FirstOrDefault(x => x.Role == Role.Role);
                if (updatedRole is not null)
                {
                    Role.Value = updatedRole.Value;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion
}
