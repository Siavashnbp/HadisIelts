@page "/Payment/WritingCorrection/{SubmissionID}"
@using HadisIelts.Client.Features.Correction.Models;
@using HadisIelts.Client.Features.Correction.WritingCorrectionComponents
@using HadisIelts.Client.Features.Payment.Models;
@using HadisIelts.Client.Features.Payment.WritingCorrectionPaymentPageComponents
@using HadisIelts.Client.Features.Teacher.Models;
@using HadisIelts.Client.Services.File;
@using HadisIelts.Client.Services.Writing;
@using HadisIelts.Shared.Requests.Payment;
@inject IClientWritingServices ClientWritingSevices;
@inject IFileServices FileServices;
<div class="container" style="margin-top:10px;">
    <div class="row">
        <div class="col">
            <ProcessedWritingFilesTable ProcessedFiles="_writingFiles" />
        </div>
    </div>
    <div class="row justify-content-center text-center">
        <div class="col">
            <h5 class="text-success">Total Price : @($"{_totalPrice:n0}") Rials</h5>
        </div>
    </div>
    <div class="row text-center" style="margin-top:15px;">
        <div class="col">
            @if (_paymentFileModels.Count < 3)
            {
                <UploadPicturesInput OnInputFilesChange="HandleInputFileChange" />
            }
            else
            {
                <h5 class="text-primary">Maximum 3 files can be uploaded</h5>
            }
        </div>
    </div>
    <div class="row">
        @if (_paymentFileModels is not null)
        {
            @foreach (var item in _paymentFileModels)
            {
                <div class="col-lg-4">
                    <PaymenImageCard PaymentFile="item" OnThumbnailIsClicked="HandleOnThumbnailIsClicked"
                             OnRemoveButtonIsClicked="HandleImageRemovebuttonIsClicked" />
                </div>
            }
        }

    </div>
    <div class="row text-center" style="margin-top:20px;margin-bottom:50px;">
        <div class="col">
            <button class="btn btn-primary">Upload Payment Files</button>

        </div>
    </div>
</div>
@if (_showModal)
{
    <ViewImageModal ImageData="@(PaymentFileModel.ViewImageData(_modalImageData))" OnCloseButtonIsClicked="CloseModal" />
}
@code {
    [Parameter]
    public string SubmissionID { get; set; }
    private string? _errorMessage;
    private uint _totalPrice;
    private string? _modalImageData;
    private bool _showModal = false;
    private int _paymentFileID = 0;
    private List<ProcessedWritingFileModel>? _writingFiles;
    private List<WritingTypeModel>? _writingTypes;
    private List<PaymentFileModel>? _paymentFileModels = new List<PaymentFileModel>();
    protected override async Task OnInitializedAsync()
    {
        var result = await ClientWritingSevices.GetSubmittedWritingCorrectionFiles(SubmissionID);
        _writingTypes = await ClientWritingSevices.GetWritingTypesAsync();
        _errorMessage = result.Message;
        _totalPrice = result.TotalPrice;
        _writingFiles = new List<ProcessedWritingFileModel>();
        _writingFiles = ProcessedWritingFileModel.ConvertFilesToProcessedWritingFile(result.ProcessedFiles, _writingTypes);
    }
    //Event Handlers
    private async Task HandleInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0 && _paymentFileModels.Count < 3)
        {
            _paymentFileModels!.Add(new PaymentFileModel
                {
                    ID = _paymentFileID++,
                    Name = e.File.Name,
                    FileSuffix = e.File.ContentType,
                    Data = await FileServices.ReadUploadedFileDataAsync(e.File),
                    DateTime = DateTime.UtcNow
                });

            StateHasChanged();
        }
    }
    private async Task HandleOnThumbnailIsClicked(string data)
    {
        _modalImageData = data;
        _showModal = true;
    }
    private void CloseModal()
    {
        _modalImageData = string.Empty;
        _showModal = false;
    }
    private void HandleImageRemovebuttonIsClicked(int id)
    {
        var file = _paymentFileModels.FirstOrDefault(x => x.ID == id);
        if (file is not null)
        {
            _paymentFileModels.Remove(file);
        }
    }

}
