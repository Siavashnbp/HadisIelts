@page "/services/writingCorrection/payment/{PaymentId}"
@using HadisIelts.Client.Features.Correction.Models;
@using HadisIelts.Client.Features.Correction.WritingCorrectionComponents
@using HadisIelts.Client.Features.Correction;
@using HadisIelts.Client.Features.Payment;
@using HadisIelts.Client.Features.Payment.WritingCorrectionPaymentPageComponents
@using HadisIelts.Client.Features.Teacher.Models;
@using HadisIelts.Client.Services.File;
@using HadisIelts.Client.Services.User;
@using HadisIelts.Client.Services.Writing;
@using HadisIelts.Shared.Requests.Correction;
@using HadisIelts.Shared.Requests.Payment;
@using System.Net;
@inject IClientWritingServices ClientWritingSevices;
@inject IFileServices FileServices;
@inject IMediator Mediator;
@inject IUserServices UserServices;
@inject NavigationManager NavMan;
<AuthorizeView>
    <Authorized>
        <BreadCrumb Pages="_pages" />
        <div class="container main-container" style="margin-top:10px;">
            @if (_paymentGroup?.Service is not null)
            {
                <div class="row">
                    <div class="col">
                        <ProcessedWritingFilesTable ProcessedFiles="_paymentGroup.Service.ProcessedWritingFiles" />
                    </div>
                </div>
                <div class="row justify-content-center text-center">
                    <div class="col">
                        <h5 class="text-success">Total Price : @($"{_paymentGroup.Service.TotalPrice:n0}") Rials</h5>
                    </div>
                </div>
            }
            <div class="row text-center">
                <h5 class="text-info">@_paymentGroup?.Message</h5>
            </div>
            <div class="row">
                @if (_paymentFiles?.Count > 0)
                {
                    <div class="accordion " id="accordionSubmittedPayments">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="submittedPaymentHeader">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#submittedPaymentCollapse" aria-expanded="false"
                                        aria-controls="submittedPaymentCollapse">
                                    Submitted Payments
                                </button>
                            </h2>
                            <div id="submittedPaymentCollapse" class="accordion-collapse collapse show" aria-labelledby="submittedPaymentHeader"
                                 data-bs-parent="#accordionSubmittedPayment">
                                <div class="accordion-body">
                                    <div class="row">

                                        @foreach (var item in _paymentFiles)
                                        {
                                            <div class="col-lg-4">
                                                <PaymenImageCard PaymentFile="item" OnThumbnailIsClicked="HandleOnThumbnailIsClicked"
                                                         OnRemoveButtonIsClicked="HandleImageRemovebuttonIsClicked" />
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row text-center" style="margin-top:15px;">
                <div class="col">
                    @if ((_paymentFiles?.Count + _pendingToUploadPaymentFiles?.Count) < 3)
                    {
                        <UploadPicturesInput OnInputFilesChange="HandleInputFileChange" />
                    }
                    else
                    {
                        <h5 class="text-primary">Maximum 3 files can be uploaded</h5>
                    }
                </div>
            </div>
            @if (_pendingToUploadPaymentFiles?.Count > 0)
            {
                <div class="accordion" id="accordionPendingPayments">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="pendingPaymentHeader">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#pendingPaymentCollapse" aria-expanded="false"
                                    aria-controls="pendingPaymentCollapse">
                                Pending To Upload Payments
                            </button>
                        </h2>
                        <div id="pendingPaymentCollapse" class="accordion-collapse collapse show"
                             aria-labelledby="pendingPaymentHeader" data-bs-parent="#accordionPendingPayment">
                            <div class="accordion-body">
                                <div class="row">

                                    @foreach (var item in _pendingToUploadPaymentFiles)
                                    {
                                        <div class="col-lg-4">
                                            <PaymenImageCard PaymentFile="item" OnThumbnailIsClicked="HandleOnThumbnailIsClicked"
                                                     OnRemoveButtonIsClicked="HandlePendingImageRemovebuttonIsClicked" />
                                        </div>
                                    }
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

            }

            @if (_pendingToUploadPaymentFiles is not null && _pendingToUploadPaymentFiles.Count > 0)
            {
                <div class="row text-center" style="margin-top:20px;margin-bottom:50px;">
                    <div class="col">
                        <button class="btn btn-primary" @onclick="(()=>UploadPaymentFiles())">Upload Payment Files</button>

                    </div>
                </div>
            }
        </div>
        @if (_showModal)
        {
            <ViewImageModal ImageData="@(FileServices.ViewImageData(_modalImageData!))" OnCloseButtonIsClicked="CloseModal" />
        }
    </Authorized>
</AuthorizeView>
@code {
    #region Parameters
    [Parameter]
    public string? PaymentId { get; set; }
    private PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>? _paymentGroup;
    private string? _modalImageData;
    private bool _showModal = false;
    private int _paymentFileId = 0;
    private List<PaymentPictureSharedModel> _paymentFiles = new List<PaymentPictureSharedModel>();
    private List<PaymentPictureSharedModel> _pendingToUploadPaymentFiles = new List<PaymentPictureSharedModel>();
    #endregion

    #region Initializers
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetWritingCorrectionPaymentPackage();
            if (_paymentGroup is not null)
            {
                await GetSubmittedWritings();
            }
        }
        catch (Exception)
        {

            throw;
        }

    }
    #endregion

    #region Methods
    private async Task UploadPaymentFiles()
    {
        try
        {
            if (_pendingToUploadPaymentFiles?.Count > 0 && PaymentId is not null && PaymentId != string.Empty)
            {
                var request = new UploadPaymentPackageRequest(_pendingToUploadPaymentFiles, PaymentId);
                var response = await Mediator.Send(request);
                if (response is not null)
                {
                    _paymentFiles = response.PaymentPictures;
                    _pendingToUploadPaymentFiles.Clear();
                    _paymentGroup!.Message = response.Message;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private async Task GetWritingCorrectionPaymentPackage()
    {
        if (PaymentId is not null && PaymentId != string.Empty)
        {
            var request = new GetPaymentGroupRequest(PaymentId);
            var result = await Mediator.Send(request);
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _paymentGroup = new PaymentGroupSharedModel<WritingCorrectionPackageSharedModel>();
                _paymentGroup = result.PaymentGroup;
                _paymentFiles = _paymentGroup.PaymentPictures;
            }
            else if (result.StatusCode == HttpStatusCode.Unauthorized)
            {
                NavMan.NavigateTo(NotAuthorizedComponent.PageUrl);
            }
        }
    }
    private async Task GetSubmittedWritings()
    {
        var request = new GetSubmittedWritingCorrectionFilesRequest(SubmissionId: _paymentGroup!.SubmittedServiceId);
        var response = await Mediator.Send(request);
        if (response?.WritingCorrectionPackage is not null)
        {
            _paymentGroup.Service = response.WritingCorrectionPackage;
        }
    }
    #endregion

    #region Event Handlers
    private async Task HandleInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0 && e.File.Size < 5E6 && _paymentFiles.Count < 3)
        {
            _pendingToUploadPaymentFiles.Add(new PaymentPictureSharedModel
                {
                    Id = _paymentFileId++,
                    Name = e.File.Name,
                    FileSuffix = e.File.ContentType,
                    Data = await FileServices.ReadUploadedFileDataAsync(e.File),
                    UploadDateTime = DateTime.UtcNow,
                    IsVerified = false,
                    Message = "Pending to upload"
                });

            StateHasChanged();
        }
    }
    private void HandleOnThumbnailIsClicked(string data)
    {
        _modalImageData = data;
        _showModal = true;
    }
    private async Task HandleImageRemovebuttonIsClicked(int id)
    {
        var file = _paymentFiles.FirstOrDefault(x => x.Id == id);
        if (file is not null)
        {
            var request = new RemovePaymentPictureRequest(id);
            var response = await Mediator.Send(request);
            if (response.WasSuccessful)
            {
                _paymentFiles.Remove(file);
            }
        }
    }
    private void HandlePendingImageRemovebuttonIsClicked(int id)
    {
        var file = _pendingToUploadPaymentFiles.FirstOrDefault(x => x.Id == id);
        if (file is not null)
        {
            _pendingToUploadPaymentFiles.Remove(file);
        }

    }
    #endregion

    #region Events
    private void CloseModal()
    {
        _modalImageData = string.Empty;
        _showModal = false;
    }
    #endregion

    #region Page Details and Information
    public static string PageUrl(string id) => $"/services/writingCorrection/payment/{id}";
    private List<WebsitePage> _pages = new List<WebsitePage>
    {
        new WebsitePage{Id=0,Name="Home",DisplayName="Home",Link="/" },
        new WebsitePage{Id=1,Name="WritingCorrections",DisplayName="Writing Corrections",Link=UserWritingCorrectionSubmissions.PageUrl },
        new WebsitePage{Id=2,Name="Submission",DisplayName="Submission"}
    };
    #endregion

}
