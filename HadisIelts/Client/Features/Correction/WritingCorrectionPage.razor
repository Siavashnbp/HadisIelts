@page "/Services/WritingCorrection/UploadFiles"
@using HadisIelts.Client.Features.Correction.Models;
@using HadisIelts.Client.Features.Correction.WritingCorrectionComponents
@using HadisIelts.Client.Features.Teacher.Models;
@using HadisIelts.Client.Services.File;
@using HadisIelts.Client.Services.User;
@using HadisIelts.Client.Services.Writing;
@using HadisIelts.Shared.Requests.Correction;
@using HadisIelts.Shared.Requests.Payment;
@using MediatR;
@using System.Timers;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager NavigationManager
@inject IMediator Mediator;
@inject IFileServices FileServices;
@inject IClientWritingServices ClientWritingServices;
@inject IUserServices UserServices;
@attribute [Authorize]
<BreadCrumb Pages=@BreadCrumbs />
<AuthorizeView>
    <Authorized>
        <div class="container">
            <div style="margin:35px; justify-content:end;">
                <button class="btn btn-primary" @onclick="(()=>_showPricesModal=true)">View Prices</button>
            </div>
            <div class="container main-form col-lg-8">
                <div class="row">
                    @if (_areFilesProcessed)
                    {
                        @if (_processedWritingFiles is not null && _processedWritingFiles.Count > 0)
                        {
                            <div class="row" style="border:dotted; padding:5px; margin:5px; border-color:seagreen">
                                <ProcessedWritingFilesTable ProcessedFiles="_processedWritingFiles" />
                                <h5>
                                    Total Cost : @($"{_totalPrice:n0}") Rials
                                </h5>
                                <div class="row">
                                    <div class="col-4">
                                        <label class="form-check-label">
                                            <InputCheckbox class="" @bind-Value="_requiresEmailResponse" />
                                            Email Corrected Files
                                        </label>
                                    </div>
                                </div>
                                <div class="row justify-content-center">
                                    <div class="col">
                                        <button class="btn btn-success" @onclick="(()=>UploadProcessedWritingFiles())">Upload Files</button>
                                    </div>
                                </div>
                            @if (_areFilesProcessed)
                            {
                                <div class="alert alert-success container" style="text-align:center; margin-top:5px;" role="alert">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                    </svg>
                                    <span>Your files has been processed successfully! You can now submit your files.</span>
                                </div>
                            }
                            </div>

                        }
                        @if (_writingFilesWithError is not null && _writingFilesWithError.Count > 0)
                        {
                            <WritingFilesWithErrorTable FilesWithError="_writingFilesWithError" />
                        }
                    }
                    else
                    {
                        <WritingFilesTable WritingFiles="_userWritingFiles" WritingTypes="_writingTypes" OnRemoveAllClick="HandleOnRemoveAllIsClicked"
                                       OnRemoveWritingClick="HandleOnWritingRemoveIsClicked" OnWritingTypeIsSelected="HandleOnWritingTypeIsSelected" />
                    }
                    <div class="row justify-content-center">
                        @if (!_areFilesProcessed)
                        {
                            <UploadFileComponent OnFileIsLoaded="HandleOnFileIsLoadedAsync" />
                            <div class="row justify-content-center">
                                <button class="btn btn-secondary" style="max-width:fit-content;" @onclick="(()=> UploadFilesToProcessAsync())">
                                    Process Files
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="col justify-content-center">
                                <button class="btn btn-danger" @onclick="(()=>ClearFiles())">Change Files</button>
                            </div>
                        }
                    </div>
                    @if (_errorMessage != string.Empty)
                    {
                        <div class="alert alert-danger" role="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                            @(_errorMessage)
                        </div>
                    }                   
                </div>

            </div>
        </div>
        @if (_showPricesModal)
        {
            <ViewPricesModal WritingCorrectionPrices="_writingCorrectionPrices" OnCloseButtonIsClicked="HandleModalCloesButtonIsClicked" />
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool _areFilesProcessed;
    private string? _errorMessage = string.Empty;
    private string? _successMessage = string.Empty;
    private int _id = 0;
    private uint _totalPrice = 0;
    private bool _requiresEmailResponse = false;
    private bool _showPricesModal = false;
    private List<WritingFileModel> _userWritingFiles = new List<WritingFileModel>();
    private ProcessWritingCorrectionFilesModel _processRequest = new ProcessWritingCorrectionFilesModel();
    private List<ProcessedWritingFileSharedModel> _processedWritingFiles = new List<ProcessedWritingFileSharedModel>();
    private List<ProcessedWritingFileSharedModel> _writingFilesWithError = new List<ProcessedWritingFileSharedModel>();
    private List<WritingTypeSharedModel> _writingTypes = new List<WritingTypeSharedModel>();
    private List<PriceGroupSharedModel> _writingCorrectionPrices = new List<PriceGroupSharedModel>();
    protected override async Task OnInitializedAsync()
    {
        _writingTypes = await ClientWritingServices.GetWritingTypesAsync();
        _writingCorrectionPrices = await GetWritingCorrectionPrices();

    }
    private async Task UploadFilesToProcessAsync()
    {
        try
        {
            _processRequest = new ProcessWritingCorrectionFilesModel();
            if (_userWritingFiles is not null && _userWritingFiles.Count > 0 &&
                _userWritingFiles.All(x => x.WritingType.ID != 0))
            {
                _processRequest.WritingFiles = FileServices.ConvertWritingFileModelToWritingFilesAsync(_userWritingFiles);
                var request = new ProcessWritingFilesRequest(WritingFiles: _processRequest.WritingFiles);
                var response = await Mediator.Send(request);
                _processedWritingFiles.Clear();
                _userWritingFiles.Clear();
                if (response.ProcessedWritingCorrection is not null
                    && response.ProcessedWritingCorrection.ProcessedWritingFiles is not null)
                {
                    _areFilesProcessed = true;
                    _successMessage = response.Message;
                    _totalPrice = response.ProcessedWritingCorrection.TotalPrice;
                    _processedWritingFiles = new List<ProcessedWritingFileSharedModel>();
                    _writingFilesWithError = new List<ProcessedWritingFileSharedModel>();
                    foreach (var item in response.ProcessedWritingCorrection.ProcessedWritingFiles)
                    {
                        if (item.PriceGroup is not null && item.PriceGroup.Price > 0)
                        {
                            _processedWritingFiles.Add(item);
                        }
                        else
                        {
                            _writingFilesWithError.Add(item);
                        }
                    }
                    StateHasChanged();
                }
                else
                {
                    _errorMessage = response.Message;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task UploadProcessedWritingFiles()
    {
        try
        {
            if (_processedWritingFiles is not null && _processedWritingFiles.Count > 0)
            {
                var files = new List<ProcessedWritingFileSharedModel>();
                foreach (var item in _processedWritingFiles)
                {
                    files.Add(new ProcessedWritingFileSharedModel
                        {
                            WritingFile = new WritingFileSharedModel
                            {
                                Name = item.WritingFile.Name,
                                Data = item.WritingFile.Data,
                                WritingTypeID = item.WritingFile.WritingTypeID,
                                WordCount = item.WritingFile.WordCount
                            },
                            PriceGroup = new PriceGroupSharedModel
                            {
                                Price = item.PriceGroup.Price,
                                PriceName = item.PriceGroup.PriceName
                            },
                            Message = string.Empty
                        });
                }
                var userID = await UserServices.GetUserIDAsync();
                if (userID is not null)
                {
                    var request = new UploadProcessedWritingFilesRequest(new WritingCorrectionPackageSharedModel
                        {
                            ID = "Submit file",
                            ProcessedWritingFiles = files,
                            RequiresEmailResponse = _requiresEmailResponse,
                            TotalPrice = _totalPrice
                        });
                    var result = await Mediator.Send(request);
                    if (result is not null)
                    {
                        var paymentID = result.PaymentID;
                        if (paymentID != string.Empty)
                        {
                            NavigationManager.NavigateTo($"/payment/WritingCorrection/{paymentID}");
                        }
                    }
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task<List<PriceGroupSharedModel>> GetWritingCorrectionPrices()
    {
        var prices = new List<PriceGroupSharedModel>();
        var result = await Mediator.Send(new GetWritingCorrectionPricesRequest());
        if (result?.WritingCorrectionPrices?.Count > 0)
        {
            foreach (var item in result.WritingCorrectionPrices)
            {
                prices.Add(new PriceGroupSharedModel
                    {
                        PriceName = item.Name,
                        Price = item.Price
                    });
            }
        }
        return prices;
    }
    //EventHandlers
    private async Task HandleOnFileIsLoadedAsync(InputFileChangeEventArgs e)
    {
        _areFilesProcessed = false;
        if (e.FileCount > 0)
        {
            foreach (var file in e.GetMultipleFiles())
            {
                _userWritingFiles.Add(
                    new WritingFileModel
                        {
                            ID = _id,
                            Name = file.Name,
                            FileSize = file.Size,
                            WritingType = new WritingTypeSharedModel(),
                            FileData = await FileServices.ReadUploadedFileDataAsync(file)
                        });

            }
            StateHasChanged();
        }
    }
    private void HandleOnRemoveAllIsClicked()
    {
        _userWritingFiles.Clear();
        StateHasChanged();
    }
    private void HandleOnWritingRemoveIsClicked(int WritingID)
    {
        var file = _userWritingFiles.FirstOrDefault(x => x.ID == WritingID);
        if (file is not null)
        {
            _userWritingFiles.Remove(file);
            StateHasChanged();
        }
    }
    private void HandleOnWritingTypeIsSelected((int WritingTypeID, int WritingID) data)
    {
        if (data.WritingTypeID != 0)
        {
            var writingType = _writingTypes.FirstOrDefault(x => x.ID == data.WritingTypeID);
            var file = _userWritingFiles.FirstOrDefault(x => x.ID == data.WritingID);
            if (writingType is not null && file is not null)
            {
                file.WritingType = writingType;
                StateHasChanged();
            }
        }
    }
    private void ClearFiles()
    {
        _processedWritingFiles.Clear();
        _userWritingFiles.Clear();
        _writingFilesWithError.Clear();
        _areFilesProcessed = false;
        StateHasChanged();
    }
    private async Task HandleModalCloesButtonIsClicked()
    {
        _showPricesModal = false;
    }
    //BreadCrumbs
    public List<WebsitePage> BreadCrumbs { get; set; } = new List<WebsitePage>{
        new WebsitePage{Name="Home",DisplayName="Home",Link="/" },
        new WebsitePage{Name="Services",DisplayName="Correction Services",Link="/Services" },
        new WebsitePage{Name="WritingCorrection",DisplayName="Writing Correction",Link="/Services/Correction/Writing" },
    };
}
