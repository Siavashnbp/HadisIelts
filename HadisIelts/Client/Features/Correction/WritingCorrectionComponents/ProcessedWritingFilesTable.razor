@using HadisIelts.Client.Features.Correction.Models;
@using System.IO
@inject IJSRuntime JS
<div style="overflow-y:auto;overflow-x:auto;">
    <table class="table table-success text-center">
        <thead>
            <tr>
                <th><h5>Row</h5></th>
                <th><h5>Name</h5></th>
                <th><h5>Price Type</h5></th>
                <th><h5>Word Count</h5></th>
                <th><h5>Price</h5></th>
                <th><h5>Correction</h5></th>
            </tr>
        </thead>
        <tbody>
            @if (ProcessedFiles != null)
            {
                int i = 1;
                @foreach (var file in ProcessedFiles)
                {
                    <tr style="vertical-align:middle;">
                        <td><h6>@(i++)</h6></td>
                        <td>
                            @file.WritingFile.Name
                            <button class="btn btn-secondary btn-center-icon" @onclick="(()=>DownloadFileFromStream(file.WritingFile))">
                                <i class="fa fa-download"></i>
                            </button>
                        </td>
                        <td><h6>@file.PriceGroup.PriceName</h6></td>
                        <td><h6>@file.WritingFile.WordCount</h6></td>
                        <td><h6>@($"{file.PriceGroup.Price:n0}")</h6></td>
                        <td>
                            @if (file.CorrectedWriting == null)
                            {
                                <h5>Not Corrected</h5>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-center-icon" @onclick="(()=>DownloadFileFromStream(file.CorrectedWriting.Data, file.CorrectedWriting.Name))">
                                    <i class="fa fa-download"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

</div>
@code {
    [Parameter, EditorRequired]
    public List<ProcessedWritingFileSharedModel> ProcessedFiles { get; set; } = new List<ProcessedWritingFileSharedModel>();
    private Stream GetFileStream(string data)
    {
        var fileStream = new MemoryStream(Convert.FromBase64String(data));
        return fileStream;
    }

    private async Task DownloadFileFromStream(WritingFileSharedModel writingFile)
    {
        var fileStream = GetFileStream(writingFile.Data);
        var fileName = $"{writingFile.Name}";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    private async Task DownloadFileFromStream(string data, string name)
    {
        var fileStream = GetFileStream(data);
        var fileName = $"{name}";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
