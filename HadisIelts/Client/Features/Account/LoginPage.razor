@page "/account/login/"
@using HadisIelts.Client.Features.Account.Models;
@using HadisIelts.Client.Services.User;
@using HadisIelts.Shared.Requests.Account;
@inject IMediator Mediator
@inject NavigationManager NavMan
@inject AuthenticationStateProvider AuthProvider;
@inject IUserServices UserServices;
@attribute [AllowAnonymous]
<PageTitle>Login</PageTitle>
<div class="main-form container main-container col-lg-5 col-md-8">
    <EditForm Model="@_loginModel.LoginModel" OnValidSubmit="PostLoginRequest">
        <FluentValidationValidator />
        <main class="form-signin w-100 m-auto container">
            <h1 class="h3 mb-3 fw-normal">Please sign in</h1>
            <div class="row">
                <div class="col-11">
                    <div class="form-floating">
                        <InputText @bind-Value="_loginModel.LoginModel.Email" type="email" class="form-control" id="floatingInput" placeholder="name@example.com" />
                        <label for="floatingInput">Email address</label>
                        <ValidationMessage For="@(()=>_loginModel.LoginModel.Email)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-11">
                    <div class="form-floating">
                        <InputText @bind-Value="_loginModel.LoginModel.Password" type="@(_showPassword?"text":"password")" class="form-control" id="floatingPassword" placeholder="Password" />
                        <label for="floatingPassword">Password</label>
                        <ValidationMessage For="@(()=>_loginModel.LoginModel.Password)" />
                    </div>
                </div>
                <div class="col-1" style="margin:auto;">
                    <i class="fa @(_showPassword?"fa-eye":"fa-eye-slash")" style="font-size:15px;cursor:pointer;"
                       @onclick="(()=>{_showPassword = !_showPassword;})"></i>
                </div>
            </div>
            <div class="d-flex checkbox mb-3" style="margin:5px; left:0; justify-content:flex-start;">
                <label>
                    <InputCheckbox @bind-Value="_loginModel.LoginModel.KeepSignedIn" type="checkbox" /> Remember me
                </label>
            </div>
            <div class="col-11">

                <button class="w-100 btn btn-lg btn-primary" type="submit" style="margin:5px;">Sign in</button>
                <div class="d-flex checkbox mb-3" style="margin:5px; left:0; justify-content:flex-start;">
                    <a class="text-primary" href="@(ForgotPasswordPage.PageUrl)">Forgot Password?</a>
                </div>
            </div>
        </main>
    </EditForm>
    <p style="margin:5px;">Don't have an account? <a class="btn btn-outline-secondary" href="@(RegisterPage.PageUrl)">Register</a></p>
    @if (_loginModel.LoginMessage is not null)
    {
        <div class="alert alert-danger" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
            </svg>
            @_loginModel.LoginMessage
            @if (_loginModel.LoginMessage == "Email is not confirmed")
            {
                <button class="btn link-dark" @onclick="(()=>PostResendConfirmationLinkRequest())">Resend confirmation link</button>
            }
        </div>
    }
    @if(_isConfirmationLinkResent)
    {
        <div class="container alert alert-success text-center justify-content-center" style="margin-top:20px;" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
            </svg>
            <span>Please check your email. A confirmation link is sent to your email</span>
        </div>
    }
</div>

@code {
    #region Parameters
    [Parameter, SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private LoginClientModel _loginModel { get; set; } = new LoginClientModel();
    private bool _showPassword = false;
    private bool _isConfirmationLinkResent = false;
    #endregion

    #region Initializers
    protected override async Task OnInitializedAsync()
    {
        var userID = await UserServices.GetUserIdAsync();
        if (userID != null)
        {
            NavMan.NavigateTo(ProfilePage.PageUrl);
        }
    }
    #endregion

    #region Methods
    private async Task PostLoginRequest()
    {
        try
        {
            var loginRequest = new AccountLoginRequest(LoginRequest: _loginModel.LoginModel);
            var response = await Mediator.Send(loginRequest);
            if (response.LoginSuccess)
            {
                ReturnUrl = ReturnUrl ?? "/";
                NavMan.NavigateTo(ReturnUrl, true);
            }
            else
            {
                _loginModel.LoginMessage = response.Message;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task PostResendConfirmationLinkRequest()
    {
        try
        {
            if (_loginModel.LoginModel.Email is not null)
            {
                var request = new ResendConfirmationLinkRequest(_loginModel.LoginModel.Email);
                var response = await Mediator.Send(request);
                if (response.Succeeded)
                {
                    _loginModel.LoginMessage = null;
                    _isConfirmationLinkResent = true;
                    StateHasChanged();
                    await Task.Delay(5000);
                    _isConfirmationLinkResent = false;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion

    #region Page Details and Information
    public const string PageUrl = "/account/login";
    #endregion
}