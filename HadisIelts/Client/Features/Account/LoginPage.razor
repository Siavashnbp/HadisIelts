@page "/account/login/"
@using HadisIelts.Client.Features.Account.Models;
@using HadisIelts.Shared.Requests.Account;
@inject IMediator Mediator
@inject NavigationManager NavMan
@inject AuthenticationStateProvider AuthProvider;
@attribute [AllowAnonymous]
<div class="main-form container col-lg-4 col-md-8">
    <EditForm Model="@_loginModel.LoginModel" OnValidSubmit="PostLoginRequest">
        <FluentValidationValidator />
        <main class="form-signin w-100 m-auto">
            <h1 class="h3 mb-3 fw-normal">Please sign in</h1>
            <div class="form-floating" style="margin:5px;">
                <InputText @bind-Value="_loginModel.LoginModel.Email" type="email" class="form-control" id="floatingInput" placeholder="name@example.com" />
                <label for="floatingInput">Email address</label>
                <ValidationMessage For="@(()=>_loginModel.LoginModel.Email)"/>
            </div>
            <div class="form-floating" style="margin:5px;">
                <InputText @bind-Value="_loginModel.LoginModel.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password" />
                <label for="floatingPassword">Password</label>
                <ValidationMessage For="@(()=>_loginModel.LoginModel.Password)" />
            </div>
            <div class="d-flex checkbox mb-3" style="margin:5px; left:0; justify-content:flex-start;">
                <label>
                    <InputCheckbox @bind-Value="_loginModel.LoginModel.KeepSignedIn" type="checkbox" /> Remember me
                </label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit" style="margin:5px;">Sign in</button>
        </main>
    </EditForm>
    <p style="margin:5px;">Don't have an account? <a class="btn btn-outline-secondary" href="/account/register">Register</a></p>
    @if (_loginModel.LoginMessage is not null)
    {
        <div class="alert alert-danger" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
            </svg>
            @_loginModel.LoginMessage
        </div>
    }
</div>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private LoginClientModel _loginModel { get; set; } = new LoginClientModel();
    private async Task PostLoginRequest()
    {
        var loginRequest = new AccountLoginRequest(LoginRequest: _loginModel.LoginModel);
        var response = await Mediator.Send(loginRequest);
        if (response.LoginSuccess)
        {
            ReturnUrl = ReturnUrl ?? "/";
            NavMan.NavigateTo(ReturnUrl, true);
        }
        else
        {
            _loginModel.LoginMessage = response.Message;
        }
    }
}