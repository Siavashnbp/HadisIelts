@page "/Account/Register"
@using HadisIelts.Client.Features.Account.Models;
@using HadisIelts.Shared.Requests.Account;
@using MediatR;
@inject IMediator Mediator;

<div class="container col-lg-4 col-md-6" style="margin:auto;">
    <EditForm Model="@_registerModel" OnValidSubmit="UploadRegisterForm">
        <FluentValidationValidator />
        <main class="form-signin w-100 m-auto">
            <h1 class="h3 mb-3 fw-normal">Please sign up</h1>

            <div class="form-floating">
                <InputText @bind-Value="_registerModel.Email" type="email" class="form-control" id="floatingInput" placeholder="name@example.com" />
                <label for="floatingInput">Email address</label>
                <ValidationMessage For="@(()=>_registerModel.Email)" />
            </div>
            <div class="form-floating">
                <InputText @bind-Value="_registerModel.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password" />
                <label for="floatingPassword">Password</label>
                <ValidationMessage For="@(()=>_registerModel.Password)" />
            </div>
            <div class="form-floating">
                <InputText @bind-Value="_registerModel.ConfirmPassword" type="password" class="form-control" id="floatingPassword" placeholder="Confirm Password" />
                <label for="floatingPassword">Confirm Password</label>
                <ValidationMessage For="@(()=>_registerModel.ConfirmPassword)" />
            </div>
            <div class="checkbox mb-3">
                <label>
                    <input type="checkbox" value="remember-me"> Remember me
                </label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit">Sign up</button>
        </main>
    </EditForm>
    @if (_submitSuccess)
    {
        <div class="alert alert-success container" style="text-align:center;" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
            </svg>
            <span>Successfully registered!</span>
        </div>
    }
    else if (_submitFail)
    {
        <div class="alert alert-danger" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
            </svg>
            @_errorMessage
        </div>
    }
</div>
@code {
    private RegisterModel _registerModel { get; set; } = new RegisterModel();
    private bool _submitSuccess = false;
    private bool _submitFail = false;
    private string _errorMessage = string.Empty;
    private async Task UploadRegisterForm()
    {
        try
        {
            var request = new SubmitRegisterUserRequest
            (
                new RegiterUserRequest
                    {
                        Email = _registerModel.Email,
                        Password = _registerModel.Password
                    }
            );
            var response = await Mediator.Send(request);
            if (response.IsSuccessful)
            {
                _submitSuccess = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }
}
