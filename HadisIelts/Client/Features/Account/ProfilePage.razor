@page "/profile"
@page "/profile/{RequestedUserID}"
@using HadisIelts.Client.Features.Account.Models;
@using HadisIelts.Client.Services.User;
@using HadisIelts.Shared.Requests.Account;
@using System.Security.Claims;
@inject IMediator Mediator;
@inject NavigationManager NavMan;
@inject IUserServices UserServices;
<AuthorizeView>
    <Authorized>
        <div class="container main-form col-lg-6">
            <div class="row">
                <div class="col-4">
                    profile image
                </div>
                <div class="d-flex col-8" style="flex-direction:column;">
                    <div class="form-floating">
                        <InputText class="form-control" placeholder="_userInformation.Username" type="text" id="floatingUsername" disabled/>
                        <label for="floatingUsername">Username</label>
                    </div>
                    <div class="form-floating">
                        <InputText class="form-control" @bind-Value="_userInformation.FirstName" typeof="text" id="floatingFirstName" />
                        <label for="floatingName">First Name</label>
                    </div>
                    <div class="form-floating">
                        <InputText class="form-control" @bind-Value="_userInformation.LastName" typeof="text" id="floatingLastName" />
                        <label for="floatingName">Last Name</label>
                    </div>
                    <div class="form-floating">
                        <InputText class="form-control" placeholder="_userInformation.Email" typeof="email" id="floatingEmail" disabled/>
                        <label for="floatingEmail">Email</label>
                    </div>
                    <div class="form-floating">
                        <InputText class="form-control" @bind-Value="_userInformation.Skype" typeof="text" id="floatingSkype" />
                        <label for="floatingSkype">Skype ID</label>
                    </div>
                    @if (_currentUserID == RequestedUserID)
                    {
                        <button>Edit</button>
                    }
                </div>
            </div>
        </div>        
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedComponent />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string RequestedUserID { get; set; } = string.Empty;
    private string _currentUserID;
    private UserInformationSharedModel _userInformation { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentUserID = await UserServices.GetUserIDAsync();
            if (RequestedUserID == string.Empty)
            {
                RequestedUserID = _currentUserID;
            }
            await GetUserInformation();
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task GetUserInformation()
    {
        try
        {
            var userInfoRequest = new GetUserInformationRequest(_currentUserID, RequestedUserID);
            var result = await Mediator.Send(userInfoRequest);
            if (result is not null)
            {
                _userInformation = new UserInformationSharedModel(
                    username: result.userInformation.Username,
                    email: result.userInformation.Email)
                    {
                        FirstName = result.userInformation.FirstName,
                        LastName = result.userInformation.LastName,
                        Skype = result.userInformation.Skype,
                    };
            }
            StateHasChanged();
        }
        catch (NullReferenceException)
        {
            NavMan.NavigateTo("/BadRequest");
        }
    }

}
