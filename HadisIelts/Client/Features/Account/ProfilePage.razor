@page "/account/profile"
@page "/account/{UserId}"
@using HadisIelts.Client.Services.User;
@using HadisIelts.Shared.Requests.Account;
@using System.Text;
@inject IMediator Mediator;
@inject NavigationManager NavMan;
@inject IUserServices UserServices;
<PageTitle>User Profile</PageTitle>
<AuthorizeView>
    <Authorized>
        <EditForm Model="_userInformation" OnValidSubmit="UpdateUserInformation" Context="UpdateUserInformation">
            <div class="container main-form col-lg-6 main-container">
                <div class="row">
                    <div class="d-flex" style="flex-direction:column;">
                        <div class="form-floating">
                            <input class="form-control" value="@(_userInformation.Username)" type="text" Id="floatingUsername" disabled />
                            <label for="floatingUsername">Username</label>
                        </div>
                        <div class="form-floating">
                            <input class="form-control" value="@(_userInformation.Email)" typeof="email" Id="floatingEmail" disabled />
                            <label for="floatingEmail">Email</label>
                        </div>
                        <div class="form-floating">
                            <InputText class="form-control" @bind-Value="_userInformation.FirstName" typeof="text" Id="floatingFirstName" disabled="@(!_isEditEnabled)" />
                            <label for="floatingName">First Name</label>
                        </div>
                        <div class="form-floating">
                            <InputText class="form-control" @bind-Value="_userInformation.LastName" typeof="text" Id="floatingLastName" disabled="@(!_isEditEnabled)" />
                            <label for="floatingName">Last Name</label>
                        </div>
                        <div class="form-floating">
                            <InputDate class="form-control" @bind-Value="_userInformation.Birthday" Id="floatingBirthday" disabled="@(!_isEditEnabled)" />
                            <label for="floatingBirthday">Birthday</label>
                        </div>
                        <div class="form-floating">
                            <InputText class="form-control" @bind-Value="_userInformation.Skype" typeof="text" Id="floatingSkype" disabled="@(!_isEditEnabled)" />
                            <label for="floatingSkype">Skype Id</label>
                        </div>
                        <div class="row justify-content-center">
                            <div class="btn-group col-lg-6">

                                @if (_currentUserId == UserId)
                                {
                                    @if (!_isEditEnabled)
                                    {
                                        <button class="btn btn-light" type="button" @onclick="(()=>_isEditEnabled = true)">Edit</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success" type="submit" style="margin:2px;">Update</button>
                                        <button class="btn btn-danger" type="button" style="margin:2px;"
                                        @onclick="(()=>ResetUserInformation())">
                                            Cancle
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    #region Parameter
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    private string _currentUserId = string.Empty;
    private UserInformationSharedModel _userInformation = new UserInformationSharedModel(string.Empty, string.Empty, string.Empty);
    private UserInformationSharedModel _defaultInformation = new UserInformationSharedModel(string.Empty, string.Empty, string.Empty);
    private bool _isEditEnabled = false;
    private string _maxDate = string.Empty;
    #endregion

    #region Initializers
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var stringBuilder = new StringBuilder();
            stringBuilder.Append(DateTime.UtcNow.Year);
            stringBuilder.Append("-");
            stringBuilder.Append(DateTime.UtcNow.Month >= 10 ? DateTime.UtcNow.Month : $"0{DateTime.UtcNow.Month}");
            stringBuilder.Append("-");
            stringBuilder.Append(DateTime.UtcNow.Day >= 10 ? DateTime.UtcNow.Day : $"0{DateTime.UtcNow.Day}");
            _maxDate = stringBuilder.ToString();
            _currentUserId = await UserServices.GetUserIdAsync();
            if (UserId is null)
            {
                UserId = _currentUserId;
            }
            await GetUserInformation();
        }
        catch (Exception)
        {
            NavMan.NavigateTo("/BadRequest");
        }
    }
    #endregion

    #region Methods
    private async Task GetUserInformation()
    {
        var userInfoRequest = new GetUserInformationRequest(UserId);
        var result = await Mediator.Send(userInfoRequest);
        if (result is not null)
        {
            _userInformation = new UserInformationSharedModel(
                id: result.UserInformation.Id,
                username: result.UserInformation.Username,
                email: result.UserInformation.Email)
                {
                    FirstName = result.UserInformation.FirstName,
                    LastName = result.UserInformation.LastName,
                    Skype = result.UserInformation.Skype,
                    Birthday = result.UserInformation.Birthday
                };
            _defaultInformation = new UserInformationSharedModel(
                id: result.UserInformation.Id,
                username: result.UserInformation.Username,
            email: result.UserInformation.Email)
                {
                    FirstName = result.UserInformation.FirstName,
                    LastName = result.UserInformation.LastName,
                    Skype = result.UserInformation.Skype,
                };
        }
        StateHasChanged();
    }
    private async Task UpdateUserInformation()
    {
        try
        {
            var request = new UpdateAccountInformationRequest(_userInformation);
            var response = await Mediator.Send(request);
            if (response?.UpdatedUserInformation is not null)
            {
                _userInformation = response.UpdatedUserInformation;
                _defaultInformation = response.UpdatedUserInformation;
                _isEditEnabled = false;
                StateHasChanged();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion

    #region Events
    private void ResetUserInformation()
    {
        _userInformation.FirstName = _defaultInformation.FirstName;
        _userInformation.LastName = _defaultInformation.LastName;
        _userInformation.Skype = _defaultInformation.Skype;
        _isEditEnabled = false;
        StateHasChanged();
    }
    #endregion

    #region Page Details and Information
    public const string PageUrl = "/account/profile";
    public static string PageUrlWithId(string id) => $"/account/{id}";
    #endregion

}
