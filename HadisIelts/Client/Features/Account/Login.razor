@page "/account/login"
@using HadisIelts.Client.Features.Account.Models;
@using HadisIelts.Shared.Requests.Account;
@inject IMediator Mediator
@inject NavigationManager NavMan
@inject AuthenticationStateProvider AuthProvider;

<div class="main-form container col-lg-4 col-md-6">
    <EditForm Model="@loginModel" OnValidSubmit="PostLoginRequest">
        <main class="form-signin w-100 m-auto">
            <h1 class="h3 mb-3 fw-normal">Please sign in</h1>

            <div class="form-floating" style="margin:5px;">
                <InputText @bind-Value="loginModel.Email" type="email" class="form-control" id="floatingInput" placeholder="name@example.com" />
                <label for="floatingInput">Email address</label>
            </div>
            <div class="form-floating" style="margin:5px;">
                <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>
            <div class="checkbox mb-3" style="margin:5px;">
                <label>
                    <InputCheckbox @bind-Value="loginModel.KeepSignedIn" type="checkbox" /> Remember me
                </label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit" style="margin:5px;">Sign in</button>
        </main>
    </EditForm>
    <p style="margin:5px;">Don't have an account? <a class="btn btn-outline-secondary" href="/account/register">Register</a></p>
</div>

@code {
    [Parameter]
    public string ReturnUrl { get; set; }
    private LoginModel loginModel { get; set; } = new LoginModel();
    private async Task PostLoginRequest()
    {
        var loginRequest = new AccountLoginRequest(
            new LoginRequest
                {
                    Email = loginModel.Email,
                    Password = loginModel.Password,
                    KeepSignedIn = loginModel.KeepSignedIn
                }
        );
        var response = await Mediator.Send(loginRequest);
        if (response.loginSuccess)
        {
            ReturnUrl = ReturnUrl ?? "/";
            NavMan.NavigateTo(ReturnUrl, true);
        }
    }
}